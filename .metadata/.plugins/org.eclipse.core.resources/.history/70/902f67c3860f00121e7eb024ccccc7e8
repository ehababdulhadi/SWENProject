package gameWorld;

import java.awt.Image;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.ImageIcon;
import userInterface.MainGameWindow;
import userInterface.Drawable;
/** Represents a Room, which can contain a Player, Zombie, Item and Doors
 * 
 */
public class Room {
	
	private String roomName;
	private String location_description;
	private ImageIcon roomBackground;
	private ArrayList<Item> itemsOfTheRoom = new ArrayList<Item>();
	private ArrayList<Player> playersList = new ArrayList<Player>();
	private Zombie zombie = null;
	private boolean hasZombie;
	private ArrayList<Door> doorsOfTheRoom = new ArrayList<Door>();
	Random randomGenerator = new Random();


	public Room(String name, ImageIcon background, String description, ArrayList<Item> items
			, ArrayList<Player> players, Zombie zombieOfTheRoom, ArrayList<Door> doorsOfTheRoom){
			
		this.roomName = name;
		this.location_description = description;
		this.roomBackground = background;
		this.itemsOfTheRoom = items;
		this.playersList = players;
		this.zombie = 
		this.doorsOfTheRoom =
		
    	hasZombie
		
		
    	Create the enemies of this location //
		//createEnemiesOfTheLocation();
		
		// Create the Stationary Objects of this location //
		createStationaryObjectsOfTheLocation();
		
		}
	
	private void createEnemiesOfTheLocation(){
		
		/**	for (int i=0; i<numberOfEnemies; i++){ 
				int randomXposition = randomGenerator.nextInt(2560); 
				int randomYposition = randomGenerator.nextInt(500); 
				int random = randomGenerator.nextInt(10);
			
				Zombie newEnemy;
				// create zombies //	
				if (random < 7) {
					//newEnemy = new Zombie(this , randomXposition, randomYposition,  500, 1, 200, 150, 500);
				}
				else if (random < 9) {
					//newEnemy = new Zombie(this , randomXposition, randomYposition,  1000, 2, 200, 150, 500);
				}
				else {
					//newEnemy = new Zombie(this , randomXposition, randomYposition,  3000, 4, 200, 150, 500);
				}
				//getEnemiesList().add(newEnemy);
			}
			**/
		}
	
	private void createStationaryObjectsOfTheLocation(){
		
		String objectName = null;
			/** Distribute items in the room randomly**/
	}
	
	public String getLocation_name() {
		return roomName;
	}
	
	public String getLocation_description() {
		return location_description;
	}


	public ArrayList<Item> getItems_in_location_ArrayList() {
		return itemsList;
	}


	public ArrayList<Player> getPlayers_in_location_ArrayList() {
		return playersList;
	}

	public Zombie getZombie() {
		return zombie;
	}

	public void setZombie(Zombie zombie) {
		this.zombie = zombie;
	}

	private boolean isHasZombie() {
		return hasZombie;
	}

	private void setHasZombie(boolean hasZombie) {
		this.hasZombie = hasZombie;
	}

	private ArrayList<Door> getDoorsOfTheRoom() {
		return doorsOfTheRoom;
	}

	private void setDoorsOfTheRoom(ArrayList<Door> doorsOfTheRoom) {
		this.doorsOfTheRoom = doorsOfTheRoom;
	}

	/*public ArrayList<GameItem> getObjects_in_location_ArrayList() {
		return objectsList;
	}
	
*/
	/*public void setLeftLocation(Room leftLocation) {
		this.leftLocation = leftLocation;
	}

	public Room getLeftLocation() {
		return leftLocation;
	}


	public void setRightLocation(Room rightLocation) {
		this.rightLocation = rightLocation;
	}


	public Room getRightLocation() {
		return rightLocation;
	}
*/
	/*public ArrayList<Zombie> getEnemiesList() {
		return enemiesList;
	}
	
	*//**
	 * Method for working out whether all the enemies in a location are dead or not.
	 *//*
	public boolean areEnemiesDead(){
		for(Zombie z : enemiesList){
			if(z.isDead()==false)
				return false;
		}
		return true;
	}*/

	/*public List<GameItem> getCarryableObjects() {
		// TODO Auto-generated method stub
		return null;
	}*/

}
